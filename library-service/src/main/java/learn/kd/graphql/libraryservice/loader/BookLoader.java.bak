package learn.kd.graphql.libraryservice.loader;

import com.netflix.graphql.dgs.DgsDataLoader;
import learn.kd.generated.schema.types.Book;
import learn.kd.generated.schema.types.Student;
import org.dataloader.MappedBatchLoader;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.stream.Collectors;

@DgsDataLoader
public class BookLoader implements MappedBatchLoader<String, List<Book>> {

    private static Map<String, List<Book>> studentToBooksMap;

    static {
        studentToBooksMap = new HashMap<>();

        List<Book> student1Books = new ArrayList<>() {{
            Book.newBuilder().id("Book1").title("The Book of GraphQL - Part I").build();
            Book.newBuilder().id("Book2").title("The Book of GraphQL - Part II").build();
        }};

        studentToBooksMap.put("1", student1Books);

        List<Book> student2Books = new ArrayList<>() {{
            new Book("Book3", "The Book of GraphQL - Part III");
            new Book("Book4", "The Book of GraphQL - Part IV");
            new Book("Book5", "The Book of GraphQL - Part V");
            new Book("Book6", "The Book of GraphQL - Part VI");
        }};

        studentToBooksMap.put("2", student2Books);
    }

    @Override
    public CompletionStage<Map<String, List<Book>>> load(Set<String> ids) {
        return CompletableFuture.supplyAsync(() -> studentToBooksMap);
    }
}
